/*
Merchant APIs

universalmacro

API version: 0.0.3
Contact: chenyunda218@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateAdminRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAdminRequest{}

// CreateAdminRequest Create admin request schema
type CreateAdminRequest struct {
	Account string `json:"account"`
	Password string `json:"password"`
	Role *Role `json:"role,omitempty"`
}

type _CreateAdminRequest CreateAdminRequest

// NewCreateAdminRequest instantiates a new CreateAdminRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAdminRequest(account string, password string) *CreateAdminRequest {
	this := CreateAdminRequest{}
	this.Account = account
	this.Password = password
	return &this
}

// NewCreateAdminRequestWithDefaults instantiates a new CreateAdminRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAdminRequestWithDefaults() *CreateAdminRequest {
	this := CreateAdminRequest{}
	return &this
}

// GetAccount returns the Account field value
func (o *CreateAdminRequest) GetAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *CreateAdminRequest) GetAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *CreateAdminRequest) SetAccount(v string) {
	o.Account = v
}

// GetPassword returns the Password field value
func (o *CreateAdminRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CreateAdminRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CreateAdminRequest) SetPassword(v string) {
	o.Password = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *CreateAdminRequest) GetRole() Role {
	if o == nil || IsNil(o.Role) {
		var ret Role
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAdminRequest) GetRoleOk() (*Role, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *CreateAdminRequest) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given Role and assigns it to the Role field.
func (o *CreateAdminRequest) SetRole(v Role) {
	o.Role = &v
}

func (o CreateAdminRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAdminRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account"] = o.Account
	toSerialize["password"] = o.Password
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

func (o *CreateAdminRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAdminRequest := _CreateAdminRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateAdminRequest)

	if err != nil {
		return err
	}

	*o = CreateAdminRequest(varCreateAdminRequest)

	return err
}

type NullableCreateAdminRequest struct {
	value *CreateAdminRequest
	isSet bool
}

func (v NullableCreateAdminRequest) Get() *CreateAdminRequest {
	return v.value
}

func (v *NullableCreateAdminRequest) Set(val *CreateAdminRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAdminRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAdminRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAdminRequest(val *CreateAdminRequest) *NullableCreateAdminRequest {
	return &NullableCreateAdminRequest{value: val, isSet: true}
}

func (v NullableCreateAdminRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAdminRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


